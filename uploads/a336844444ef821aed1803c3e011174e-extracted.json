{"title":"rest-and-graphql.pdf","contents":["Backend: A Node+ Express REST API\nClientServer\nServer-side \nLogic, \nDatabase \nAccess etc.\n?\nPOST /post\nGET /posts\nGET /posts/:postId\nAPI Endpoints\nNode/ \nExpress\nMongoDB","REST & Http Methods (Http Verbs)\nMore than just GET & POST\nGET\nGet a Resource from the \nServer\nPOST\nPost a Resource to the \nServer (i.e. create or \nappend  Resource)\nPUT\nPut a Resource onto the \nServer (i.e. create or \noverwrite a  Resource)\nPATCH\nUpdate parts of an \nexisting Resource on the \nServer\nDELETE\nDelete a Resource on the \nServer\nOPTIONS\nDetermine whether follow-\nup Request is allowed \n(sent automatically)","How does GraphQLWork?\nClientServer\nServer-side \nLogic, \nDatabase \nAccess etc.\n?\nPOST /graphql\nOne Single Endpoint\nPOST Request \ncontains Query \nExpression (to define \nthe Data that should \nbe returned)\nNode/ \nExpress\nMongoDB","A GraphQLQuery\nẖ\nIM=JQ\u0000ẖ\nMK = J \u0000ẖ\nF9E=\n9?=\nẗ\nẗ\nẗ\nOperation type\nOperation “endpoint”\nRequested fields\nOther types:\nmutation\nsubscription","REST vs GraphQL\nREST APIGraphQL API\nRequest path + http method (= \n“endpoint”) identify a resource / \naction on the server\nAPI is stateless and decoupled from \nany frontend\nThe most common type of API \nbecause of its ease of use\nQuery expression identifies a \nresource and action\nAPI is stateless and decoupled from \nany frontend\nPopular but less common, because \nyou need to learn the query language\nIn this course"]}