{"title":"CARTESIAN PRODUCT and JOIN (INNER) operation.pdf","contents":["Relational Algebra Operations \nCARTESIAN PRODUCT and Different types of JOIN operations \n \nCARTESIAN    PRODUCT operation—also    known    as CROSS \nPRODUCT or CROSS  JOIN—which  is  denoted  by  ×.  This  is  also  a \nbinary set operation, but the relations on which it is applied do not have \nto be union compatible. In its binary form, this set operation produces a \nnew element by combining every member (tuple) from one relation (set) \nwith every member (tuple) from the other relation (set).","with every member (tuple) from the other relation (set).  \n \nIn general, the result of R(A\n1\n, A\n2\n, ..., A\nn\n) × S(B\n1\n, B\n2\n, ..., B\nm\n) is a relation Q \nwith  degree n + m attributes Q(A\n1\n, A\n2\n,  ..., A\nn\n, B\n1\n, B\n2\n,  ..., B\nm\n),  in  that \norder. \n \nThe resulting relation Q has one tuple for each combination of tuples—\none from R and one from S. Hence, if R has n\nR\n tuples (denoted as |R| = \nn\nR\n), and S has n\nS\n tuples, then R × S will have n\nR\n * n\nS\n tuples.","Binary Relational Operation: JOIN (or INNER JOIN) \n \nThe JOIN operation, denoted by , is used to combine related tuples \nfrom  two  relations into  single  “longer”  tuples.  This  operation  is  very \nimportant  for  any  relational database  with  more  than  a  single  relation \nbecause it allows us to process relationships among relations. \n \nThe general form of a JOIN operation on two relations R(A\n1\n, A\n2\n, ..., A\nn\n) \nand S(B\n1\n, B\n2\n, ..., B\nm\n) is","1\n, A\n2\n, ..., A\nn\n) \nand S(B\n1\n, B\n2\n, ..., B\nm\n) is \n \n \nThe result of the JOIN is a relation Q with n + m attributes Q(A\n1\n, A\n2\n, ..., \nA\nn\n, B\n1\n, B\n2\n, ..., B\nm\n) in that order; Q has one tuple for each combination of","tuples—one from R and one from S—whenever the combination satisfies \nthe  join  condition.  This  is  the main  difference  between  CARTESIAN \nPRODUCT and JOIN. \n \nThis  type  of  join,  where  tuples  with  no  match  are  eliminated,  is also \nknown as an inner join. \n \nIn JOIN, only combinations of tuples satisfying the join condition appear \nin the result, whereas in the CARTESIAN PRODUCT all combinations \nof  tuples  are included  in  the  result.  The join  condition  is  specified  on","of  tuples  are included  in  the  result.  The join  condition  is  specified  on \nattributes  from  the  two  relations R and S and  is  evaluated for  each \ncombination  of  tuples.  Each  tuple  combination  for  which  the  join \ncondition evaluates to TRUE is included in the resulting relation Q as a \nsingle combined tuple. \n \n• Types of JOIN operations \n➢ Inner join \n➢ Outer join \n \n• Types of Inner join \n➢ Theta JOIN \n➢ EQUI JOIN \n➢ Natural JOIN \n \nTheta JOIN","➢ Outer join \n \n• Types of Inner join \n➢ Theta JOIN \n➢ EQUI JOIN \n➢ Natural JOIN \n \nTheta JOIN \nA  general  join  condition  is  of  the  form <condition> AND <condition> \nAND...AND <condition> where, each <condition> is of the form A\ni\n θ B\nj\n, \nA\ni\n is  an  attribute  of R, B\nj\n is  an  attribute of S, A\ni\n and B\nj\n have  the  same \ndomain, and θ (theta) is one of the comparison operators {=, <, ≤, >, ≥, \n≠}.  A  JOIN  operation  with  such  a  general  join  condition  is called  a","≠}.  A  JOIN  operation  with  such  a  general  join  condition  is called  a \nTHETA JOIN.","Tuples whose join attributes are NULL or for which the join condition is \nFALSE do  not appear  in  the  result.  In  that  sense,  the  JOIN  operation \ndoes not necessarily  preserve  all  of  the  information  in  the  participating \nrelations, because tuples that do not get combined with matching ones in \nthe other relation do not appear in the result.","The EQUI JOIN \nThe  most  common  use  of  JOIN  involves  join  conditions  with  equality \ncomparisons only.  Such  a  JOIN,  where  the  only  comparison operator \nused is =, is called an EQUIJOIN. \nNotice  that  in  the  result  of  an EQUIJOIN  we  always  have  one  or  more \npairs of attributes that have identical values in every tuple.  \n➢ Equi join produces duplicate columns (superfluous or redundant or \nextra column)","NATURAL JOIN  \nBecause   one   of   each   pair   of   attributes   with identical   values   is \nsuperfluous in EQUI JOIN, a new operation called NATURAL JOIN—\ndenoted  by R*S was  created  to  get  rid  of  the  second (superfluous) \nattribute   in   an   EQUIJOIN   condition. The   standard   definition   of \nNATURAL  JOIN  requires  that  the  two  join  attributes (or  each  pair  of \njoin  attributes)  have  the  same  name  in  both  relations.  If  this  is not  the","join  attributes)  have  the  same  name  in  both  relations.  If  this  is not  the \ncase, a renaming operation is applied first."]}