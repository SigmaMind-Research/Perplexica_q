{"title":"RecursionTracing-46.pdf","contents":["DS\n\nRecursion \n•\nA function calling itself is called recursion \n\n•\nThere must be a base condition that will terminate the recursion \notherwise it will go into infinite loop\n\nSyntax : \nType fun( param )\n\n{\n\nif( < base condition > )\n\n{\n\n\t1..........\n\n\t2. fun( param )\n\n\t3..........\n\n}\n\n}\n\nAn example of Recursive Function :  \nvoid fun1(int n) \n{ \n    if(n>0) \n    { \n        printf(\"%d\" , n ); \n        fun1(n-1); \n    } \n} \nvoid main() \n{ \n    int x = 3; \n    fun1(x); \n}","Working Of Recursive Function :  \n•\nOnce the functions are executed and the end result is obtained then \nit trace back to the previous functions and terminates it until all the \ncalls are closed and terminated .\n\n•\nPrinting of function can be done on calling time or returning time ."]}