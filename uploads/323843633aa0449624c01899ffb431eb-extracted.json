{"title":"subscription Workflow.pdf","contents":["Detailed Workflow: Adding Subscriptions \n➢ User Authentication: \n• Users must be signed in to access subscription features. Utilize the existing \nsignup/sign-in mechanism to identify the userId. \n➢ Razorpay Account: \n• Create a Razorpay account. \n• Set up subscription plans (e.g., monthly, yearly). \n• Generate key_id and key_secret for API integration. \n➢ Database Setup: \n• Create a subscriptions table to store subscription details: \n• Table Structure:","• Create a subscriptions table to store subscription details: \n• Table Structure: \n• id: Unique identifier for each subscription (Primary Key). \n• subscription_id: Unique ID from Razorpay. \n• user_id: ID of the user (Foreign Key). \n• plan_id: ID of the selected plan. \n• status: Current status of the subscription (e.g., pending, active, \ncancelled). \n• start_date: Date when the subscription starts. \n• end_date: Date when the subscription ends. \n# Workflow Steps","• end_date: Date when the subscription ends. \n# Workflow Steps \n➢ Frontend: Fetch and Display Plans \n• Route: /api/subscription/plans \n• Fetch available subscription plans from Razorpay using the API. \n• Render these plans on the frontend UI, including pricing and descriptions. \n➢ User Selection \n• When the user selects a plan, collect the planId. \n➢ Backend: Create Subscription \n• Route: /api/subscription/create \n• Input: \n• planId (from Razorpay) \n• userId (from authentication token/session)","➢ Process: \n• Call Razorpay’s subscriptions.create API to create a new subscription. \n• Save the following details to the subscriptions table: \n• subscription_id (from Razorpay) \n• user_id \n• plan_id \n• Set initial status as 'pending'. \n➢ Frontend: Razorpay Checkout for Payment \n• Once the subscription is created, launch Razorpay Checkout. \n• Pass the subscription_id to Razorpay Checkout to handle payment. \n➢ Post Payment \n• Razorpay returns payment_id, subscription_id, and a signature.","➢ Post Payment \n• Razorpay returns payment_id, subscription_id, and a signature. \n• Send these details to your backend for validation. \n➢ Backend: Validate Payment \n• Route: /api/subscription/validate \n• Validation Process: \n• Validate the Razorpay signature using the received payment_id and subscription_id. \n• If Valid: \n• Update the subscription status to 'active' in the database. \n• Save start_date and end_date based on the selected plan. \n➢ Webhook: Razorpay Subscription Events","➢ Webhook: Razorpay Subscription Events \n• Razorpay sends events (e.g., subscription.charged) to your webhook. \n• Route: /api/subscription/webhook \n• Process: \n• Validate the webhook signature. \n• Update the subscriptions table based on events received (e.g., update status to \n'active' or 'cancelled'). \n➢ Frontend: Display Subscription Status \n• Call /api/subscription/status to check the subscription status for the logged-in user. \n• Display Messages Based on Status:","• Display Messages Based on Status: \n• If status is 'active': \"You have an active subscription.\"","• If status is 'pending': \"Payment pending.\" \n• If status is 'cancelled': \"Subscription cancelled.\" \n➢ Protect Premium Features \n• Implement middleware to verify user subscription status before accessing premium routes."]}